# -*- coding: utf-8 -*-
"""Data_generation_HR_TECH.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yQZua55le5S8jC0Gx9HaJOeSG9h-G3FQ
"""

import random
import pandas as pd
import numpy as np
from datetime import datetime, timedelta

random.seed(42)
np.random.seed(42)

"""## NAME"""

num_rows = 100


first_names = [
    "Aarav","Vivaan","Ishaan","Kabir","Reyansh","Arjun","Advait","Rohan","Dhruv","Shaurya",
    "Aanya","Diya","Myra","Anaya","Kiara","Aisha","Sara","Meera","Riya","Tara",
    "Priya","Neha","Saanvi","Ishita","Lavanya","Sneha","Kavya","Pooja","Ritika","Esha"
]
last_names = [
    "Sharma","Verma","Patel","Reddy","Singh","Iyer","Chopra","Kapoor","Malhotra","Nair",
    "Gupta","Agarwal","Bose","Mehta","Kulkarni","Desai","Gowda","Shetty","Pandey","Joshi",
    "Rao","Khan","Saxena","Nambiar","Bhandari","Chatterjee","Dutta","Menon","Saxena","Bhatt"
]


names = []
for fn in first_names:
    for ln in last_names:
        names.append(f"{fn} {ln}")
random.shuffle(names)
names = names[:num_rows]

"""## ROLE

"""

roles = [
    "Marketing Manager",
    "Software Engineer",
    "HR Executive",
    "Data Analyst",
    "Project Manager",
    "AI/ML Engineer"
]

"""## ROLE_SKILLS

"""

role_skills = {
    "Marketing Manager": ["branding", "campaigns", "digital marketing", "analytics", "team management"],
    "Software Engineer": ["python", "java", "problem-solving", "data structures", "algorithms"],
    "HR Executive": ["employee engagement", "communication", "recruitment", "policy", "onboarding"],
    "Data Analyst": ["data analysis", "sql", "excel", "visualization", "statistics"],
    "Project Manager": ["leadership", "agile", "project planning", "stakeholder", "risk management"],
    "AI/ML Engineer": ["machine learning", "python", "deep learning", "model deployment", "data preprocessing"]
}

"""## JD"""

role_jd = {
    "Marketing Manager": "Lead marketing campaigns, drive brand awareness across digital platforms, and manage a small marketing team. Creativity and analytics required.",
    "Software Engineer": "Design and implement scalable software solutions, write clean code, and collaborate on architecture decisions. Strong problem solving and data structures knowledge expected.",
    "HR Executive": "Manage recruitment, employee engagement initiatives, and HR policy implementation. Excellent communication and organizational skills required.",
    "Data Analyst": "Analyze business data, build dashboards and reports, and support decision making with insights. Strong SQL and visualization experience required.",
    "Project Manager": "Lead cross-functional projects, manage schedules and stakeholders, and ensure delivery using Agile methodologies.",
    "AI/ML Engineer": "Develop and deploy machine learning models, perform data preprocessing and model evaluation, and work on production ML pipelines."
}

"""## TRANSCRIPT

"""

greetings = [
    "Good morning! Thank you for this opportunity.",
    "Good afternoon, thank you for taking the time.",
    "Hi, thanks for having me today."
]

interviewer_openers = [
    "You're welcome. Let's start with some questions.",
    "Thanks for joining — let's begin.",
    "Great to meet you. We'll go through some questions."
]

def choose_with_fillers(base_text, filler_prob=0.25):
    fillers = ["uh", "you know", "I mean", "well", "...", "so"]
    if random.random() < filler_prob:
        f = random.choice(fillers)
        parts = base_text.split(" ", 1)
        if len(parts) > 1:
            return parts[0] + " " + f + " " + parts[1]
        else:
            return f + " " + base_text
    return base_text

def make_candidate_answer(role, topic):
    skills = role_skills.get(role, [])
    templates = {
        "intro": [
            f"I am a {role.split()[0]} with experience in " + ", ".join(skills[:2]) + ".",
            f"I graduated in Computer Science and have worked on projects involving {', '.join(skills[:2])}.",
            f"I have around {random.randint(2,7)} years of experience focusing on " + ", ".join(skills[:2]) + "."
        ],
        "strengths": [
            "I enjoy problem-solving and collaborating with teams.",
            f"My strengths are {skills[0]} and {skills[1]}.",
            "I am detail-oriented and I communicate well with stakeholders."
        ],
        "weakness": [
            "Sometimes I get too focused on details, but I try to delegate.",
            "I can be cautious with deadlines, and I'm working on prioritization.",
            "I tend to overanalyze but I've improved by setting time-boxes."
        ],
        "technical": [
            f"I have hands-on experience with {skills[0]} and {skills[1]}.",
            f"I worked on projects using {', '.join(skills[:3])}.",
            f"For technical tasks I usually rely on {skills[0]} and complement it with {skills[1]}."
        ],
        "project": [
            f"I led a project where we used {skills[0]} to deliver a solution that improved metrics.",
            f"I developed a tool using {skills[0]} that automated a lot of manual work.",
            f"My last project involved {skills[1]} and cross-functional coordination."
        ],
        "team": [
            "I enjoy mentoring juniors and helping the team grow.",
            "I coordinate closely with cross-functional stakeholders to deliver results."
        ],
        "tools": [
            "I regularly use tools like JIRA and Trello for tracking.",
            "I use SQL and Excel for analysis and reporting.",
            "I use Git for version control and Jenkins for CI/CD."
        ],
        "learning": [
            "I take hands-on courses and apply them to projects.",
            "I learn by building small projects and iterating quickly."
        ],
        "goals": [
            "In the next 5 years, I aim to grow into a leadership role.",
            "I want to deepen my expertise and lead a team of engineers/marketers."
        ],
        "closing": [
            "Thank you for your time. I'm excited about this opportunity.",
            "I look forward to hearing from you. Thank you."
        ]
    }
    base = random.choice(templates.get(topic, ["I can elaborate more if you'd like."]))
    return choose_with_fillers(base, filler_prob=0.25)


def generate_transcript(name, role):
    turns = []
    cand_greet = random.choice(greetings)
    turns.append(f"{name}: {cand_greet}")
    turns.append(f"Interviewer: {random.choice(interviewer_openers)}")
    topics = ["intro", "strengths", "weakness", "technical", "project", "team", "tools", "learning", "goals", "closing"]
    num_lines = random.randint(20,24)
    i = 2
    interviewer_qs = [
        "To begin, can you tell me about yourself?",
        "What are your key strengths?",
        "What is a weakness you are working on?",
        "Tell me about a recent technical/project you worked on.",
        "Which tools and technologies do you use?",
        "How do you handle deadlines and pressure?",
        "How do you work with cross-functional teams?",
        "How do you approach learning a new skill?",
        "What motivates you at work?",
        "Do you have any questions for us?",
        "Can you walk me through a challenging problem you solved?",
        "Describe your role in your last project."
    ]

    while i < num_lines:
        q = random.choice(interviewer_qs)
        turns.append(f"Interviewer: {q}")
        i += 1
        if i >= num_lines:
            break
        if "tell me about yourself" in q.lower() or "begin" in q.lower():
            topic = "intro"
        elif "strength" in q.lower():
            topic = "strengths"
        elif "weakness" in q.lower():
            topic = "weakness"
        elif "technical" in q.lower() or "project" in q.lower() or "walk me" in q.lower() or "challenge" in q.lower():
            topic = "project" if random.random()<0.5 else "technical"
        elif "tools" in q.lower():
            topic = "tools"
        elif "learning" in q.lower():
            topic = "learning"
        elif "motivate" in q.lower():
            topic = "goals"
        elif "questions for us" in q.lower():
            topic = "closing"
        else:
            topic = random.choice(topics)
        answer = make_candidate_answer(role, topic)
        if random.random() < 0.2:
            turns.append(f"Candidate: {answer}")
        else:
            turns.append(f"{name}: {answer}")
        i += 1

    if not any("Thank you" in t or "look forward" in t or "closing" in t.lower() for t in turns[-4:]):
        turns.append(f"Interviewer: That concludes our questions. Do you have anything to ask us?")
        turns.append(f"{name}: {random.choice(['Yes, I would like to know more about the team I’d be working with.', 'No, thank you. I look forward to hearing from you.'])}")
    return "\n".join(turns)

"""## DATA

"""

rows = []

start_date = datetime(2023,1,1)
for idx in range(num_rows):
    interview_id = f"INT{str(1001+idx).zfill(4)}"
    name = names[idx]

    age = random.randint(22,45)

    gender = random.choices(["Male","Female","Other"], weights=[0.47,0.47,0.06])[0]

    role = random.choice(roles)

    skills = role_skills[role]

    industry_skills = ", ".join(skills)

    jd = role_jd[role]


    delta_days = random.randint(0, (datetime(2025,10,1)-start_date).days)
    interview_date = (start_date + timedelta(days=delta_days)).strftime("%Y-%m-%d")

    transcript = generate_transcript(name, role)

    rows.append({
        "interview_id": interview_id,
        "name": name,
        "age": age,
        "gender": gender,
        "role_applied": role,
        "industry_skills": industry_skills,
        "jd": jd,
        "interview_date": interview_date,
        "transcript": transcript
    })

df = pd.DataFrame(rows)

assert len(df) == num_rows
assert df['name'].is_unique


file_path = "Synthetic_data_HRTECH.csv"
df.to_csv(file_path, index=False)

